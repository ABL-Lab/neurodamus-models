/**
 * @file GluSynapseHelper.hoc
 * @brief Encapsulate any hoc actions that are necessary to instantiate this synapse type
 * @author king, chindemi
 * @date 04/05/2016
 * @remark Copyright Â© BBP/EPFL 2005-2016; All rights reserved. Do not distribute without further notice.
 */

/**
 * This helper object will encapsulate the hoc actions needed to create our plastic excitatory synapse
 */
begintemplate GluSynapseHelper

objref synapse
public synapse

/**
 * @param tgid gid of Postsynaptic cell
 * @param synParameters set of paramters loaded from default nrn.h5
 * @param x location of the synapse along the section (0<=x<=1)
 * @param synapseID id assigned to this synapses within the cell's context
 * @param baseSeed for random number generator
 */
proc init() { local tgid, x, synapseID, baseSeed  localobj synParams
    tgid = $1
    synParams = $o2
    x = $3
    synapseID = $4
    baseSeed = $5

    synapse = new GluSynapse(x)
    synapse.tau_d_AMPA = synParams.DTC
    synapse.Use = abs( synParams.U )
    synapse.Dep = abs( synParams.D )
    synapse.Fac = abs( synParams.F )

    // for now, use two seeds based on gid and snyapseID.  In the future we will have an optional synapseSeed
    // also note that somewhere we must have set the random123 global seed (BlueConfig BaseSeed)
    synapse.setRNG( tgid, 100000 + synapseID )
    synapse.synapseID = synapseID

    synapse.tau_GB = 3.6137197105541636
    synapse.gamma_d_GB = 1.6297400557081063
    synapse.gamma_p_GB = 143.77781121403007
    synapse.theta_d_GB = 0.0006494056928249507
    synapse.theta_p_GB = 0.013954874119344767
    synapse.Nrrp = 2

    synapse.toggleLTPlasticity()
    
    // Override weight from nrn.h5
    //synapse.gmax_AMPA = synParams.weight
    //synParams.weight = 1  // TODO Check with Jim
}

endtemplate GluSynapseHelper
