# test_models.yml
# ~~~~~~~~~~~~~~~
#
# A set of default jobs for the individual models CI's
# Namely it triggers this projects CI as a downstream, bumping submodules and creating a MR
# -

workflow:
  rules:
    # Rules taken from official docs to avoid duplicated pipelines
    - if: $CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS && $CI_PIPELINE_SOURCE == "push"
      when: never
    - when: always

stages:
  - test
  - deploy

variables:
  MOD_DIR: mod
  BLUECONFIGS_BRANCH:
    value: $BLUECONFIGS_BRANCH
    description: 'Name of the blueconfigs branch to test against'
  GIT_SUBMODULE_STRATEGY: recursive


.test_defaults:
  stage: test
  before_script:
    - '[[ $MODEL_NAME != common ]] && ./fetch_common.bash'


.bb5_test:
  extends: .test_defaults
  tags:
    - bb5_map
  variables:
    bb5_build_dir: "pipeline"  # Notice: this keeps build dir among jobs! no artifacts needed
    bb5_partition: prod_small
    RUN_PY_TESTS: "yes"


# Basic tests
# ~~~~~~~~~~~
#
# The following two tests ensure that the mod files can be compiled, both by nrniv directly
# as well as with build_neurodamus together with neurodamus-core mods (Core modesNeuron + CoreNeuron)
#
bare_build:
  extends: .test_defaults
  image: bbpgitlab.epfl.ch:5050/hpc/spatialindex/ubuntu_20.04_devel
  before_script:
    - git config --global url."https://gitlab-ci-token:${CI_JOB_TOKEN}@bbpgitlab.epfl.ch/".insteadOf 'git@bbpgitlab.epfl.ch:'
    - 'apt-get update -y'
    - 'apt-get install -y ssh-client'
    - '[[ $MODEL_NAME != common ]] && ./fetch_common.bash'
  script:
    - python3 -m venv venv
    - . venv/bin/activate
    - pip install -U setuptools pip wheel
    - pip install NEURON
    - nrnivmodl $MOD_DIR
    - if [ ! -f x86_64/special ]; then
    -     echo "Error running nrnivmodl"
    -     exit 1
    - fi
    - x86_64/special -c 'print "Looking good!"'


build_neurodamus:
  # pipeline template to ensure neurodamus mods can be compiled together
  extends: .bb5_test
  script:
    - module load unstable neurodamus-neocortex hpe-mpi intel-oneapi-compilers
    - MOD_TMP=_mods.tmp
    - mkdir -p $MOD_TMP
    - cp $NEURODAMUS_NEOCORTEX_ROOT/share/mod_neurodamus/*.mod $MOD_TMP/
    - cp $NEURODAMUS_NEOCORTEX_ROOT/share/mod_full/neuron_only_mods.txt $MOD_TMP/
    - cp -f $MOD_DIR/*.mod $MOD_TMP/
    - build_neurodamus.sh $MOD_TMP
    - if [ ! -f x86_64/special ]; then
    -     echo "Error running nrnivmodl"
    -     exit 1
    - fi
    - x86_64/special -c 'print "Looking good!"'

set_alt_branches:
  script:
    - echo "$CI_COMMIT_MESSAGE" | grep '^[[:alnum:]_]*_BRANCH=' > branch_variables.env || touch branch_variables.env
    - . branch_variables.env
    - echo "BLUECONFIGS_PIPELINE_BRANCH=$BLUECONFIGS_BRANCH" >> branch_variables.env
    - cat branch_variables.env
  artifacts:
    reports:
      dotenv: branch_variables.env

# BlueConfigs tests
# ~~~~~~~~~~~~~~~~~
#
# The heavy-duty tests, where mods are compiled with Spack and run against the
# blueconfigs test suite. Only related models tests are run (set TEST_VERSIONS)
#
blueconfig_tests:
  trigger:
    project: hpc/sim/blueconfigs
    branch: $BLUECONFIGS_PIPELINE_BRANCH
    strategy: depend
  needs:
    - set_alt_branches
  rules:
    - if: $MODEL_NAME != "common"  # If we're updating "common" test all the neurodamus models
      variables:
        TEST_VERSIONS: $MODEL_NAME
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
    - when: manual
      allow_failure: true


# CD :: neurodamus-models bump
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
# When a model is merged to its main branch we trigger neurodamus-models CI, whose
# `bump_model_branch` plan bumps the submodule, creating a new commit and opening a MR.
#
bump_models:
  stage: deploy
  variables:
    GIT_SUBMODULE_STRATEGY: none
    BUMP_MODEL_BRANCH: $CI_COMMIT_BRANCH
  trigger:
    project: hpc/sim/neurodamus-models
    branch: $ND_MODELS_BRANCH
  rules:
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH && $CI_PIPELINE_SOURCE != "schedule"'
    - when: manual
      allow_failure: true
